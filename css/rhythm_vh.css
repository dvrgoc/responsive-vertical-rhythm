/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* breakpoint variables - start */
@media all and (max-height: 399px) {
  h1 {
    line-height: 30vh;
    font-size: 15vh;
    padding: 10vh;
  }
  p {
    line-height: 10vh;
    font-size: 7.5vh;
    padding: 10vh 5vh;
  }
}

@media all and (min-height: 400px) and (max-height: 799px) {
  h1 {
    line-height: 15vh;
    font-size: 7.5vh;
    padding: 5vh;
  }
  p {
    line-height: 5vh;
    font-size: 2.5vh;
    padding: 5vh 2.5vh;
  }
}

@media all and (min-height: 800px) {
  h1 {
    line-height: 12vh;
    font-size: 6vh;
    padding: 4vh;
  }
  p {
    line-height: 4vh;
    font-size: 2vh;
    padding: 4vh;
  }
}

html {
  font-size: 62.5%;
}

.fira {
  font-family: 'Fira Sans';
}

.lobster {
  font-family: 'Lobster';
}

.roboto {
  font-family: 'Roboto Slab';
}

@media all and (max-height: 399px) {
  html {
    background: repeating-linear-gradient(to bottom, black 0, white 0.2vh, white 9.8vh, black 10vh);
  }
}

@media all and (min-height: 400px) and (max-height: 799px) {
  html {
    background: repeating-linear-gradient(to bottom, black 0, white 0.2vh, white 4.8vh, black 5vh);
  }
}

@media all and (min-height: 800px) {
  html {
    background: repeating-linear-gradient(to bottom, black 0, white 0.2vh, white 3.8vh, black 4vh);
  }
}

html {
  min-height: 100%;
}

* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

.cover {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  height: 100vh;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  background-size: cover;
  background-image: url("https://picsum.photos/1920/1080?blur");
}

.cover h1 {
  width: 100%;
  text-shadow: 1px 1px white;
  text-align: center;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
